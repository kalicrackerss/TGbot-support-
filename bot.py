import logging
import asyncio
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from aiogram.exceptions import TelegramBadRequest
from aiogram import BaseMiddleware
from typing import Dict, Any, Callable, Awaitable

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '7958697244:AAGqmpJSCQEG8GjqcuD6PP5gxgeek-j7fuo'
ADMIN_ID = 7371677127
STATE_FILE = Path('bot_state.json')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–æ–≤ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)
users_db = {}
active_chats = {}

# –°–æ–æ–±—â–µ–Ω–∏—è
WELCOME_MESSAGE = """
- –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.
    –ü–∏—à–∏, –∑–∞—á–µ–º –ø—Ä–∏—à–µ–ªü•¶
"""

class StateSaverMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        result = await handler(event, data)
        await save_state()
        return result

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
async def load_state():
    global users_db, active_chats
    try:
        if STATE_FILE.exists():
            with open(STATE_FILE, 'r') as f:
                data = json.load(f)
                users_db = data.get('users_db', {})
                active_chats = data.get('active_chats', {})
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
                for user_id, user_data in users_db.items():
                    for msg in user_data.get('messages', []):
                        if isinstance(msg['date'], str):
                            msg['date'] = datetime.fromisoformat(msg['date'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

async def save_state():
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        state_to_save = {
            'users_db': users_db,
            'active_chats': active_chats
        }
        
        for user_id, user_data in state_to_save['users_db'].items():
            for msg in user_data.get('messages', []):
                if isinstance(msg['date'], datetime):
                    msg['date'] = msg['date'].isoformat()
        
        with open(STATE_FILE, 'w') as f:
            json.dump(state_to_save, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def get_media_type(message: types.Message) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    if message.sticker:
        return "—Å—Ç–∏–∫–µ—Ä"
    elif message.photo:
        return "—Ñ–æ—Ç–æ"
    elif message.video:
        return "–≤–∏–¥–µ–æ"
    elif message.document:
        return "–¥–æ–∫—É–º–µ–Ω—Ç"
    elif message.audio:
        return "–∞—É–¥–∏–æ"
    elif message.voice:
        return "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.animation:
        return "–≥–∏—Ñ–∫–∞"
    return "—Ç–µ–∫—Å—Ç"

async def forward_to_admin(user_id: int, message: types.Message):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
    user_data = users_db.get(user_id, {})
    user_name = user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    user_info = f"{user_name} (ID: {user_id})"
    
    try:
        media_type = get_media_type(message)
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–∏–ø–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        info_msg = await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info}\n–¢–∏–ø: {media_type.capitalize()}",
            reply_markup=get_admin_keyboard(user_id))
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if message.sticker:
            msg = await bot.send_sticker(
                chat_id=ADMIN_ID,
                sticker=message.sticker.file_id)
        elif message.photo:
            msg = await bot.send_photo(
                chat_id=ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=message.caption)
        elif message.video:
            msg = await bot.send_video(
                chat_id=ADMIN_ID,
                video=message.video.file_id,
                caption=message.caption)
        elif message.document:
            msg = await bot.send_document(
                chat_id=ADMIN_ID,
                document=message.document.file_id,
                caption=message.caption)
        elif message.voice:
            msg = await bot.send_voice(
                chat_id=ADMIN_ID,
                voice=message.voice.file_id)
        elif message.animation:
            msg = await bot.send_animation(
                chat_id=ADMIN_ID,
                animation=message.animation.file_id)
        else:
            msg = await bot.send_message(
                chat_id=ADMIN_ID,
                text=message.text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        content = (message.sticker.file_id if message.sticker else 
                  message.text or message.caption or f"[{media_type}]")
        
        users_db[user_id].setdefault('messages', []).append({
            'type': media_type,
            'content': content,
            'date': datetime.now(),
            'message_id': msg.message_id,
            'info_msg_id': info_msg.message_id
        })
        
        users_db[user_id]['last_admin_msg_id'] = msg.message_id
        await save_state()
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}", exc_info=True)
        return False

def get_admin_keyboard(user_id=None):
    builder = InlineKeyboardBuilder()
    if user_id:
        builder.add(InlineKeyboardButton(
            text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
            callback_data=f"reply_{user_id}"))
    builder.add(InlineKeyboardButton(
        text="üìÇ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤",
        callback_data="list_chats"))
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_main"))
    return builder.as_markup()

@dp.message(Command('start'))
async def start(message: types.Message):
    user = message.from_user
    users_db[user.id] = {
        'name': user.full_name,
        'username': user.username or "–Ω–µ—Ç username",
        'messages': []
    }
    await save_state()
    await message.answer(WELCOME_MESSAGE)

@dp.message(F.chat.id != ADMIN_ID)
async def handle_user_message(message: types.Message):
    try:
        user = message.from_user
        
        if user.id not in users_db:
            users_db[user.id] = {
                'name': user.full_name,
                'username': user.username or "–Ω–µ—Ç username",
                'messages': []
            }
            await save_state()
        
        if not await forward_to_admin(user.id, message):
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

@dp.callback_query(F.data.startswith("reply_"))
async def reply_to_user(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[1])
        user_data = users_db.get(user_id)
        
        if not user_data:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            history = []
            for m in user_data.get('messages', [])[-5:]:
                if m['type'] == '—Å—Ç–∏–∫–µ—Ä':
                    history.append("üé¥ [—Å—Ç–∏–∫–µ—Ä]")
                elif m['type'] == '—Ñ–æ—Ç–æ':
                    history.append("üì∑ [—Ñ–æ—Ç–æ]")
                elif m['type'] == '–≤–∏–¥–µ–æ':
                    history.append("üé• [–≤–∏–¥–µ–æ]")
                elif m['type'] == '–¥–æ–∫—É–º–µ–Ω—Ç':
                    history.append("üìÑ [–¥–æ–∫—É–º–µ–Ω—Ç]")
                elif m['type'] == '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
                    history.append("üé§ [–≥–æ–ª–æ—Å–æ–≤–æ–µ]")
                else:
                    history.append(m.get('content', '[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]'))
            
            active_chats[callback.message.chat.id] = user_id
            await save_state()
            
            await callback.message.edit_text(
                text=f"üí¨ –ß–∞—Ç —Å {user_data['name']} (ID: {user_id})\n\n" +
                     "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(history) + "\n\n" +
                     "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç (–º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç, —Å—Ç–∏–∫–µ—Ä, —Ñ–æ—Ç–æ –∏ –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"close_{user_id}"),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_chats")
                ]]))
        except TelegramBadRequest as e:
            if "Message is not modified" not in str(e):
                raise
                
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reply_to_user: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@dp.callback_query(F.data == "list_chats")
async def list_chats_handler(callback: types.CallbackQuery):
    try:
        if not users_db:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
            return
        
        builder = InlineKeyboardBuilder()
        
        sorted_users = sorted(
            users_db.items(),
            key=lambda x: x[1]['messages'][-1]['date'] if x[1].get('messages') else datetime.min,
            reverse=True
        )
        
        for user_id, user_data in sorted_users[:10]:
            last_msg = user_data.get('messages', [])[-1] if user_data.get('messages') else None
            last_msg_text = ""
            
            if last_msg:
                if last_msg['type'] == '—Å—Ç–∏–∫–µ—Ä':
                    last_msg_text = "üé¥ [—Å—Ç–∏–∫–µ—Ä]"
                elif last_msg['type'] == '—Ñ–æ—Ç–æ':
                    last_msg_text = "üì∑ [—Ñ–æ—Ç–æ]"
                elif last_msg['type'] == '–≤–∏–¥–µ–æ':
                    last_msg_text = "üé• [–≤–∏–¥–µ–æ]"
                else:
                    last_msg_text = last_msg.get('content', '[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]')[:30] + "..." if last_msg.get('content') else '[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]'
            
            builder.add(InlineKeyboardButton(
                text=f"{user_data['name']} - {last_msg_text}",
                callback_data=f"reply_{user_id}"
            ))
        
        builder.adjust(1)
        
        try:
            await callback.message.edit_text(
                text="üìÇ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:",
                reply_markup=builder.as_markup()
            )
        except TelegramBadRequest as e:
            if "Message is not modified" not in str(e):
                raise
                
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤")

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    try:
        try:
            await callback.message.edit_text(
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=get_admin_keyboard()
            )
        except TelegramBadRequest as e:
            if "Message is not modified" not in str(e):
                raise
                
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞")

@dp.message(F.chat.id == ADMIN_ID)
async def handle_admin_reply(message: types.Message):
    try:
        # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ reply
        if message.reply_to_message:
            for user_id, data in users_db.items():
                if (data.get('last_admin_msg_id') == message.reply_to_message.message_id or 
                    data.get('info_msg_id') == message.reply_to_message.message_id):
                    await send_to_user(user_id, message)
                    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    return
        
        # –û—Ç–≤–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
        user_id = active_chats.get(message.chat.id)
        if user_id:
            await send_to_user(user_id, message)
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞", reply_markup=get_admin_keyboard())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

async def send_to_user(user_id: int, message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        media_type = get_media_type(message)
        
        if message.sticker:
            await bot.send_sticker(user_id, message.sticker.file_id)
            content = message.sticker.file_id
        elif message.photo:
            await bot.send_photo(
                user_id, 
                message.photo[-1].file_id,
                caption="üì® –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n" + (message.caption or ""))
            content = message.caption or "[—Ñ–æ—Ç–æ]"
        elif message.video:
            await bot.send_video(
                user_id,
                message.video.file_id,
                caption="üì® –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n" + (message.caption or ""))
            content = message.caption or "[–≤–∏–¥–µ–æ]"
        elif message.document:
            await bot.send_document(
                user_id,
                message.document.file_id,
                caption="üì® –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n" + (message.caption or ""))
            content = message.caption or "[–¥–æ–∫—É–º–µ–Ω—Ç]"
        elif message.voice:
            await bot.send_voice(user_id, message.voice.file_id)
            content = "[–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
        elif message.animation:
            await bot.send_animation(user_id, message.animation.file_id)
            content = "[–≥–∏—Ñ–∫–∞]"
        else:
            text = message.text or "[–º–µ–¥–∏–∞]"
            await bot.send_message(
                user_id,
                f"üì® –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
            content = text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        if user_id in users_db:
            users_db[user_id].setdefault('messages', []).append({
                'type': media_type,
                'content': content,
                'date': datetime.now(),
                'from_admin': True
            })
            await save_state()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")

@dp.callback_query(F.data.startswith("close_"))
async def close_chat(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[1])
        if callback.message.chat.id in active_chats:
            del active_chats[callback.message.chat.id]
            await save_state()
            
        await callback.message.edit_text(
            text=f"‚ùå –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–∫—Ä—ã—Ç",
            reply_markup=get_admin_keyboard())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞")

async def on_startup():
    await load_state()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")

async def on_shutdown():
    await save_state()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    dp.update.middleware(StateSaverMiddleware())
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())